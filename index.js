const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:7545"));

const express = require('express');
const app = express();
const port = 3000;

app.listen(port, () => {
  console.log("Application started and listening on port 3000");
})

app.use(express.static('public'));
app.use(express.json());

app.get('/accounts', async (req, res) => {
  const accounts = await web3.eth.getAccounts();
  res.json(accounts);
});

app.post('/bai1', async(req, res) => {
  const { address } = req.body;
  const ABI = [{"inputs":[],"name":"execute","outputs":[{"internalType":"int256[]","name":"","type":"int256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int256","name":"n","type":"int256"}],"name":"isPerfect","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"perfects","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}];
  const bytecode = '0x608060405234801561001057600080fd5b50610787806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806308ee4471146100465780636146195414610076578063d71647f614610094575b600080fd5b610060600480360381019061005b91906102b0565b6100c4565b60405161006d91906103bd565b60405180910390f35b61007e6100e8565b60405161008b9190610380565b60405180910390f35b6100ae60048036038101906100a99190610283565b61019c565b6040516100bb91906103a2565b60405180910390f35b600081815481106100d457600080fd5b906000526020600020016000915090505481565b60606000600290505b6103e88113610145576101038161019c565b156101325760008190806001815401808255809150506001900390600052602060002001600090919091909150555b808061013d90610646565b9150506100f1565b50600080548060200260200160405190810160405280929190818152602001828054801561019257602002820191906000526020600020905b81548152602001906001019080831161017e575b5050505050905090565b600080600190506000600290505b8381826101b7919061050f565b1361022e57600081856101ca919061068f565b141561021b578381826101dd919061050f565b1461020b5780846101ee91906104a5565b81836101fa9190610411565b6102049190610411565b915061021a565b80826102179190610411565b91505b5b808061022690610646565b9150506101aa565b50828114801561023f575060018314155b1561024e576001915050610254565b60009150505b919050565b60008135905061026881610723565b92915050565b60008135905061027d8161073a565b92915050565b6000602082840312156102995761029861071e565b5b60006102a784828501610259565b91505092915050565b6000602082840312156102c6576102c561071e565b5b60006102d48482850161026e565b91505092915050565b60006102e98383610362565b60208301905092915050565b6000610300826103e8565b61030a8185610400565b9350610315836103d8565b8060005b8381101561034657815161032d88826102dd565b9750610338836103f3565b925050600181019050610319565b5085935050505092915050565b61035c81610626565b82525050565b61036b81610632565b82525050565b61037a81610632565b82525050565b6000602082019050818103600083015261039a81846102f5565b905092915050565b60006020820190506103b76000830184610353565b92915050565b60006020820190506103d26000830184610371565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600061041c82610632565b915061042783610632565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610462576104616106c0565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561049a576104996106c0565b5b828201905092915050565b60006104b082610632565b91506104bb83610632565b9250826104cb576104ca6106ef565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610504576105036106c0565b5b828205905092915050565b600061051a82610632565b915061052583610632565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610564576105636106c0565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156105a1576105a06106c0565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156105de576105dd6106c0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561061b5761061a6106c0565b5b828202905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b600061065182610632565b91507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610684576106836106c0565b5b600182019050919050565b600061069a82610632565b91506106a583610632565b9250826106b5576106b46106ef565b5b828207905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b61072c81610632565b811461073757600080fd5b50565b6107438161063c565b811461074e57600080fd5b5056fea264697066735822122082c9c20b58980940269790068c08be46c8d40a7837b55d004774eea97c690bb464736f6c63430008070033';
  
  const contract = new web3.eth.Contract(ABI);

  contract
    .deploy({ data: bytecode })
    .send({ from: address, gas: 4700000 })
    .then(initContract => {
      initContract.methods.execute().call((err, data) => {
        if (err) {
          console.log(err);
        }

        res.send(data);
      });
    });
});